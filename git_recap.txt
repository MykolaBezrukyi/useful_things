GIT Recap:
1. 13 page
2. 26-64 p.
(
     git add <file> - add file to INDEX
     git commit -m <message> - add files from INDEX to DB
     git checkout -- <file> - delete all changes from INDEX (LOCALLY!!!)
     git reset HEAD <file> - delete file from INDEX
     git log - history of commits
     git status (-s) - files' status (MODIFIED, STAGED (ADDED TO INDEX), UNTRACKED, etc.)
     git remote (-v) - list of remote repositories (if -v: show fetch and merge urls)
     git remote add <remote_repository_shortname> <url> - add remote repository with its corresponding shortname and URL
     git fetch <remote_repository_shortname> - get all changes from remote repository
     git push <remote_repository_shortname> <local_branch_name> - send all changes made locally in a particular branch to remote repository
     git remote show <remote_repository_shortname> - show detail info about remote repository (for instance, tracked, new branches on it, etc.)
     git remote rename <old_remote_repository_shortname> <new_remote_repository_shortname> - rename a remote repository's shortname
     git remote rm <remote_repository_shortname> - delete a remote repository
     TAGS:
          git tag (-l) - list of tags
          git tag -l "1.8.5*" - list of tags by filter
          git tag -a <tagname> -m "<message>" - create an annotation tag
          git tag <tagname> - create a common tag
          git show <tagname> - get info about tag and commit
          git tag -a <tagname> <commit_sha-1> - create a tag after some history of commits
          git push <remote_repository_shortname> <tagname> - send tag to remote repository
          git push <remote_repository_shortname> --tags - send all tags to remote repository
          git tag -d <tagname> - delete a common tag
          git push <remote_repository_shortname> :refs/tags/<tagname> - delete a tag on remote repository
          git checkout <tagname> - transfer to tag (DETACHED HEAD!!!)
)
3. 65-108 p.
(
     BASICS OF BRANCHING:
          commit (snapshot) -> tree -> blob files
          git branch <branchname> - create a branch
          git checkout <branchname> - transfer to a branch
          git checkout -b <branchname> - create and transfer to a branch at the moment
          git merge <branchname> - merge a particular branch into a current branch
          git branch -d <branchname> - delete a branch
          git branch - list of branches
          git branch -v - list of branches with last commit on it
          git branch --merged (--no-merged) - list of merged branches with current one (*)
          git branch --move <old_branch_name> <new_branch_name> - rename a branch locally
          git push --set-upstream <remote_repository_shortname> <newbranchname> - rename a branch remotely (but old branch names stores remotely as well, so we have to delete it)
          git push <remote_repository_shortname> --delete <oldbranchname|branchname> - delete an old branch remotely
          git branch --all - list of all branches (remote and local ones)
          REMOTE BRANCHES:
               git ls-remote <remote_repository_shortname> - list of remote links (tags, branches, etc.)
               git remote show <remote_repository_shortname> - the same as previous
               remote branches look like <remote_repository_shortname>/<branchname> locally
               git fetch <remote_repository_shortname> - sync local remote branch with remote branch itself
               git push <remote_repository_shortname> <localbranchname> - send a local branch on remote repository
               git push <remote_repository_shortname> <localbranchname>:<remotebranchname> - the same as previous but we can rename a local branch while sending on remote repository
               git checkout -b <localbranchname> <remote_repository_name>/<remote_branchname> - create a local branch from remote one that we don't have loccaly
               git branch -vv - detail info how local branches are connected to remote ones
               git fetch --all - get full info from all remote repositories
          BRANCH REBASE:
               git rebase <basebranch> <topicbranch> - rebase a topic branch ON base branch
               git rebase --onto <basebranch> <topicbranchv1> <topicbranchv2> - find commits on <topicbranchv2> regarding <topicbranchv1> and rebase ON <basebranch>
)
4. 229-237 p.
(
	GIT SHOW:
		git show <sha-1>|<branchname> - show the info about commit
		HEAD^ - the parent of the HEAD
		git show HEAD^2 - the second parent of HEAD
		HEAD^ and HEAD~ - the same
		git show HEAD~2 - the parent of the first parent of HEAD
	GIT LOG ADVANCED:
		git log <branchname1>..<branchname2> - show all commits on branchname2 but not on branchname1
		git log origin/master..HEAD - show all commits on current branch which will be sent during next `git push`
		git log --left-right <branchname1>...<branchname2> - show commits that are on branchname1 and branchname2 but not on both at the same time      
)
5. 237-242 p.
(
	GIT ADD ADVANCED:
		git add -i <filepath> - add a filepath in interactive mode
		git add -p <filepath> - add a part of filepath in index
)
6. 242-248 p.
(
	GIT STASH:
		git stash - stash files that are in index and modified to some store
		git stash apply (--index) - apply the last change from stash store (if --index it's gonna recover the whole state of your repository at that moment)
		git stash list - get list of stashed changes in store
		git stash apply stash@{n} - apply a particular stash change
		git stash drop stash@{n} - drop a stashed change from store
		git stash --keep-index - stash the changes and keep them in index
		git stash -u - stash modifier, index and UNTRACKED changes as well
		git stash -a - stash all changes (even .gitignore files)
		git stash branch <branchname> - create a new branch, transfer to commit when stash was done, try to apply stash changes, if successfully - delete a change from stash
	GIT CLEAN:
		git clean -f -d - delete all files and folders that are untracked, but also it can be used for deleting all changes that u don't want to store
		git clean -d -n - ALWAYS RUN THIS COMMANDS BEFORE ABOVE ONE, it shows what files will be deleted in preview mode
)
7. 252-256 p.
(
	GIT GREP:
		git grep -n <name> - show file:linenumber linecontext where name stores
		git grep -p <name> - show file linecontext where name stores in FUNCTION or METHOD
	GIT LOG SEARCH:
		git log -S <name> --oneline - show oneline commit in which name was created or edited	
		git log -L :<name>:<filename> - show the history of changes of name in filename line by line
)
8. 256-264 p.
(
	HISTORY REWRITING:
		git commit --amend - change the last commit (change the commit message, add, remove files, etc.)
		git rebase -i HEAD~(^)<n> - rebase on the parent of n-th commit
			GIT REBASE -i:
				edit - change the commit message, add, remove files, etc., then git add, git commit --amend, git rebase --continue
				drop - delete a commit
				squash - unit several commits
				to split 1 commit into several:
					edit, git reset HEAD^ (remove from stage area), git add, git commit, git rebase --continue		
		git filter-branch --tree-filter -all 'rm -f <filename>' HEAD - delete a filename from each commit and all branches
)
9. 264-287 p.
(
	RESET:
		GIT has 3 trees:
			HEAD - the last commit, the parent of next one
			INDEX (stage area) - the next commit
			YOUR FOLDER - sandbox
		git reset --soft HEAD~ - transfer a BRANCH!!! to the parent of current commit and change the HEAD tree
		git reset [--mixed] HEAD~ - transfer a BRANCH!!! to the parent of current commit and change the HEAD, INDEX trees
		git reset --hard HEAD~ - transfer a BRANCH!!! to the parent of current commit and change the HEAD, INDEX and YOUR FOLDER trees (if the last changes are not commited they're gonna be deleted forever)
		git reset [--mixed] <filename> - reset filename from HEAD in INDEX
		git reset <sha-1> -- <filename> - reset filename from sha-1 in INDEX
	CHECKOUT:
		when RESET transfer a branch, CHECKOUT transfer a HEAD on a branch
		git checkout [branch] - transfer a HEAD to [branch]
		git checkout [branch] <filename> - replace INDEX and YOUR FOLDER with last commit
)
10. 287-305 p.
(
	ADVANCED MERGING:
		git merge --abort - cancel merging (everything will be ok, if it wasn't modifierd files)
		git show :1:<file>.<fileextension> > <file>.common.<fileextension> - show the file of parent common commit
		git show :2<...> - show the file of current branch
		git show :3<...> - show the file of merged branch
		git diff --ours [--theirs] - show what merging has brought
		git reset --hard HEAD~ - revert a merge commit
		git revert -m 1 HEAD - revert a merge commit with creating a "revert commit"
		git merge -Xours [-Xtheirs] <branch> - merge of <branch> in current branch, if there's a conflict take [ours] or [theirs] version
		git merge -s ours <branch> - merge of <branch> in current branch, but not take any change from <branch> (remain eth from current branch)
)

NOTE:
	How the history is splited after branching?:
		1. master, temp
		2. make a commit on master
		3. switch to temp
		4. make a commit on temp
		5. the history is splited
